// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.6
// source: pusher.proto

package pusher_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PusherClient is the client API for Pusher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PusherClient interface {
	RealTimeQuote(ctx context.Context, opts ...grpc.CallOption) (Pusher_RealTimeQuoteClient, error)
}

type pusherClient struct {
	cc grpc.ClientConnInterface
}

func NewPusherClient(cc grpc.ClientConnInterface) PusherClient {
	return &pusherClient{cc}
}

func (c *pusherClient) RealTimeQuote(ctx context.Context, opts ...grpc.CallOption) (Pusher_RealTimeQuoteClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pusher_ServiceDesc.Streams[0], "/pusher.Pusher/RealTimeQuote", opts...)
	if err != nil {
		return nil, err
	}
	x := &pusherRealTimeQuoteClient{stream}
	return x, nil
}

type Pusher_RealTimeQuoteClient interface {
	Send(*RealTimeQuoteRequest) error
	Recv() (*RealTimeQuoteResp, error)
	grpc.ClientStream
}

type pusherRealTimeQuoteClient struct {
	grpc.ClientStream
}

func (x *pusherRealTimeQuoteClient) Send(m *RealTimeQuoteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pusherRealTimeQuoteClient) Recv() (*RealTimeQuoteResp, error) {
	m := new(RealTimeQuoteResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PusherServer is the server API for Pusher service.
// All implementations must embed UnimplementedPusherServer
// for forward compatibility
type PusherServer interface {
	RealTimeQuote(Pusher_RealTimeQuoteServer) error
	mustEmbedUnimplementedPusherServer()
}

// UnimplementedPusherServer must be embedded to have forward compatible implementations.
type UnimplementedPusherServer struct {
}

func (UnimplementedPusherServer) RealTimeQuote(Pusher_RealTimeQuoteServer) error {
	return status.Errorf(codes.Unimplemented, "method RealTimeQuote not implemented")
}
func (UnimplementedPusherServer) mustEmbedUnimplementedPusherServer() {}

// UnsafePusherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PusherServer will
// result in compilation errors.
type UnsafePusherServer interface {
	mustEmbedUnimplementedPusherServer()
}

func RegisterPusherServer(s grpc.ServiceRegistrar, srv PusherServer) {
	s.RegisterService(&Pusher_ServiceDesc, srv)
}

func _Pusher_RealTimeQuote_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PusherServer).RealTimeQuote(&pusherRealTimeQuoteServer{stream})
}

type Pusher_RealTimeQuoteServer interface {
	Send(*RealTimeQuoteResp) error
	Recv() (*RealTimeQuoteRequest, error)
	grpc.ServerStream
}

type pusherRealTimeQuoteServer struct {
	grpc.ServerStream
}

func (x *pusherRealTimeQuoteServer) Send(m *RealTimeQuoteResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pusherRealTimeQuoteServer) Recv() (*RealTimeQuoteRequest, error) {
	m := new(RealTimeQuoteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Pusher_ServiceDesc is the grpc.ServiceDesc for Pusher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pusher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pusher.Pusher",
	HandlerType: (*PusherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RealTimeQuote",
			Handler:       _Pusher_RealTimeQuote_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pusher.proto",
}
